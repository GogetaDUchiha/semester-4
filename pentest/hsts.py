import requests
from urllib.parse import urlparse

def check_hsts_vulnerability(url):
    """
    Checks for HSTS header configuration, specifically looking for max-age=0.
    Also checks for HTTP to HTTPS redirection.
    """
    print(f"--- Checking HSTS for: {url} ---")

    parsed_url = urlparse(url)
    if parsed_url.scheme != 'https':
        print("Warning: Provided URL is not HTTPS. HSTS is only effective over HTTPS.")
        print(f"Attempting to check HTTPS version: {parsed_url.scheme.replace('http', 'https')}://{parsed_url.netloc}{parsed_url.path}")
        url = f"https://{parsed_url.netloc}{parsed_url.path}"
        parsed_url = urlparse(url) # Re-parse for consistency

    # 1. Check HSTS header on HTTPS
    try:
        response = requests.get(url, allow_redirects=False, timeout=10)
        print(f"Status Code for {url}: {response.status_code}")

        hsts_header = response.headers.get('Strict-Transport-Security')

        if hsts_header:
            print(f"Strict-Transport-Security header found: {hsts_header}")
            hsts_directives = [d.strip() for d in hsts_header.split(';')]
            max_age = None
            include_sub_domains = False
            preload = False

            for directive in hsts_directives:
                if directive.startswith('max-age='):
                    try:
                        max_age = int(directive.split('=')[1])
                    except ValueError:
                        print("Error: max-age value is not an integer.")
                        max_age = -1 # Indicate error
                elif directive.lower() == 'includesubdomains':
                    include_sub_domains = True
                elif directive.lower() == 'preload':
                    preload = True

            print(f"  - max-age: {max_age if max_age is not None else 'Not Found'}")
            print(f"  - includeSubDomains: {include_sub_domains}")
            print(f"  - preload: {preload}")

            if max_age is not None:
                if max_age == 0:
                    print("\n!!! VULNERABILITY DETECTED: max-age is 0 !!!")
                    print("This effectively disables HSTS, allowing downgrade attacks.")
                elif max_age < 31536000: # Less than 1 year
                    print(f"\nWarning: max-age is low ({max_age} seconds). Recommended value is at least 31536000 (1 year).")
            else:
                print("\nWarning: max-age directive missing from HSTS header.")
        else:
            print("Strict-Transport-Security header NOT found.")
            print("VULNERABILITY: No HSTS header is present on this page.")

    except requests.exceptions.RequestException as e:
        print(f"Error making HTTPS request to {url}: {e}")
        print("Could not check HSTS header due to network or SSL error.")

    print("\n--- Checking HTTP to HTTPS Redirection ---")
    http_url = f"http://{parsed_url.netloc}{parsed_url.path}"
    try:
        http_response = requests.get(http_url, allow_redirects=False, timeout=10)
        print(f"Request to {http_url} resulted in status code: {http_response.status_code}")

        if http_response.status_code >= 300 and http_response.status_code < 400:
            location_header = http_response.headers.get('Location')
            print(f"  Redirected to: {location_header}")
            if location_header and location_header.startswith('https://'):
                print("  Good: Redirects from HTTP to HTTPS.")
            else:
                print("  Warning: Redirects, but not directly to HTTPS, or Location header is missing.")
        else:
            print("  Warning: No immediate redirect from HTTP to HTTPS. Content might be served over HTTP.")
            if not http_response.headers.get('Strict-Transport-Security') and http_response.status_code == 200:
                print("  VULNERABILITY: HTTP content is served without HSTS. Direct access to insecure HTTP is possible.")


    except requests.exceptions.RequestException as e:
        print(f"Error making HTTP request to {http_url}: {e}")
        print("Could not check HTTP to HTTPS redirection.")

    print("\n--- HSTS Check Complete ---")

# --- How to use the script ---
if __name__ == "__main__":
    target_url = "https://portals.au.edu.pk/ADMISSIONS_TEST"
    check_hsts_vulnerability(target_url)

    print("\n--- Example for a site with no HSTS (for comparison) ---")
    check_hsts_vulnerability("http://example.com") # This will test HTTP to HTTPS and then check HSTS if redirected

    print("\n--- Example for a site with good HSTS (for comparison) ---")
    check_hsts_vulnerability("https://google.com")
